// app/api/start-download/route.ts

import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs/promises';
import path from 'path';
import supabase from '../../../lib/supabase';

interface DownloadEntry {
  token: string;
  filePath: string;
  createdAt: string;
  expiresInMinutes: number;
  orderId?: string;
  downloadStarted?: boolean;
  downloadCompleted?: boolean;
  deviceFingerprint?: string;
  userAgent?: string;
  startedAt?: string;
  completedAt?: string;
}

export async function POST(req: NextRequest) {
  try {
    const { token, deviceFingerprint, userAgent } = await req.json();
    
    if (!token || !deviceFingerprint) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const DB_PATH = path.join(process.cwd(), 'data', 'downloads.json');
    
    // üîç ‡∏´‡∏≤ token ‡πÉ‡∏ô downloads.json ‡∏´‡∏£‡∏∑‡∏≠ Supabase
    let entries: DownloadEntry[] = [];
    let tokenFound = false;
    
    try {
      const raw = await fs.readFile(DB_PATH, 'utf-8');
      entries = JSON.parse(raw);
      
      const entryIndex = entries.findIndex(e => e.token === token);
      if (entryIndex !== -1) {
        const entry = entries[entryIndex];
        
        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const createdAt = new Date(entry.createdAt);
        const expiresAt = new Date(createdAt.getTime() + entry.expiresInMinutes * 60000);
        
        if (new Date() > expiresAt && !entry.downloadCompleted) {
          return NextResponse.json({ error: 'Token expired' }, { status: 410 });
        }
        
        // üïµÔ∏è‚Äç‚ôÇÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ device fingerprint
        if (entry.deviceFingerprint && entry.deviceFingerprint !== deviceFingerprint) {
          console.log('‚ö†Ô∏è Different device detected:', {
            original: entry.deviceFingerprint.substring(0, 8),
            new: deviceFingerprint.substring(0, 8)
          });
          
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î = ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
          // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß = block
          if (entry.downloadCompleted) {
            return NextResponse.json({ 
              error: 'File already downloaded on another device',
              code: 'ALREADY_DOWNLOADED'
            }, { status: 403 });
          }
        }
        
        // üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó entry
        entries[entryIndex] = {
          ...entry,
          downloadStarted: true,
          deviceFingerprint,
          userAgent,
          startedAt: new Date().toISOString()
        };
        
        tokenFound = true;
      }
    } catch (err) {
      console.log('downloads.json not found, checking Supabase...');
    }
    
    // üîç ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô downloads.json ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÉ‡∏ô Supabase
    if (!tokenFound) {
      const { data: orderData, error } = await supabase
        .from('Orders')
        .select('id, download_token, download_expires, items')
        .eq('download_token', token)
        .single();
        
      if (error || !orderData) {
        return NextResponse.json({ error: 'Token not found' }, { status: 404 });
      }
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (orderData.download_expires && new Date() > new Date(orderData.download_expires)) {
        return NextResponse.json({ error: 'Token expired' }, { status: 410 });
      }
      
      console.log('‚úÖ Token found in Supabase, starting download tracking');
    }
    
    // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
    if (tokenFound) {
      await fs.writeFile(DB_PATH, JSON.stringify(entries, null, 2));
    }
    
    console.log('üöÄ Download started:', {
      token: token.substring(0, 8) + '...',
      device: deviceFingerprint.substring(0, 8) + '...',
      userAgent: userAgent?.substring(0, 50) + '...'
    });
    
    return NextResponse.json({ success: true, message: 'Download started' });
    
  } catch (error) {
    console.error('Error in start-download:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}