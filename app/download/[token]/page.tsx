// /app/download/[token]/page.tsx - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç + ‡πÄ‡∏û‡∏¥‡πà‡∏° debug

import { notFound } from 'next/navigation';
import supabase from '../../../lib/supabase';
import DownloadPageClient from './DownloadPageClient';

interface PageProps {
  params: Promise<{
    token: string;
  }>;
}

export default async function DownloadPage({ params }: PageProps) {
  const { token } = await params;

  console.log('üîç Looking up download token:', token);
  console.log('üîç Token length:', token.length);

  try {
    // üÜï ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤
    console.log('üîé Searching for token in Supabase:', {
      token: token,
      tokenLength: token.length,
      tokenType: typeof token
    });

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ token ‡πÉ‡∏ô Supabase - ‡πÉ‡∏ä‡πâ debug ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const { data: order, error, count } = await supabase
      .from('Orders')
      .select('*', { count: 'exact' })
      .eq('download_token', token);

    console.log('üìä Supabase query result:', {
      data: order,
      error: error,
      count: count,
      dataLength: order?.length || 0
    });

    // üÜï ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ token ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    if (!order || order.length === 0) {
      console.log('‚ùå Token not found with exact match, trying alternative search...');
      
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ LIKE ‡∏´‡∏£‡∏∑‡∏≠ contains
      const { data: altOrder, error: altError } = await supabase
        .from('Orders')
        .select('*')
        .ilike('download_token', `%${token}%`);

      console.log('üîç Alternative search result:', {
        data: altOrder,
        error: altError
      });

      // ‡∏•‡∏≠‡∏á‡∏î‡∏π Orders ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
      const { data: recentOrders } = await supabase
        .from('Orders')
        .select('id, download_token, created_at, is_used')
        .order('created_at', { ascending: false })
        .limit(5);

      console.log('üìã Recent 5 orders for debugging:', recentOrders?.map(o => ({
        id: o.id,
        token: o.download_token ? o.download_token.substring(0, 8) + '...' : 'null',
        tokenFull: o.download_token,
        created: o.created_at,
        isUsed: o.is_used
      })));

      notFound();
    }

    // ‡πÉ‡∏ä‡πâ record ‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠
    const orderRecord = order[0];
    
    console.log('‚úÖ Token found in Supabase:', {
      token: token.substring(0, 8) + '...',
      orderId: orderRecord.id,
      filePath: orderRecord.file_path,
      isUsed: orderRecord.is_used,
      expiresAt: orderRecord.download_expires,
      usedAt: orderRecord.used_at,
      fullTokenInDB: orderRecord.download_token
    });

    // üÜï ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö token ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DB
    if (orderRecord.download_token !== token) {
      console.log('‚ö†Ô∏è Token mismatch:', {
        requestToken: token,
        dbToken: orderRecord.download_token,
        areEqual: orderRecord.download_token === token
      });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ expiration
    const now = new Date();
    const expiresAt = new Date(orderRecord.download_expires);
    const isExpired = now > expiresAt;

    console.log('‚è∞ Time check:', {
      now: now.toISOString(),
      expiresAt: orderRecord.download_expires,
      isExpired,
      timeDiff: expiresAt.getTime() - now.getTime()
    });

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
    if (isExpired) {
      console.log('‚è∞ Token expired:', token);
      return (
        <DownloadPageClient
          token={token}
          entry={{
            token,
            filePath: 'expired',
            createdAt: orderRecord.created_at,
            expiresInMinutes: 0,
            orderId: orderRecord.id
          }}
          supabaseData={{
            orderId: orderRecord.id,
            isExpired: true
          }}
          expiresAt={orderRecord.download_expires}
          isCompleted={false}
        />
      );
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ token ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (downloaded completed)
    if (orderRecord.is_used && orderRecord.used_at) {
      console.log('üîí Token already used:', token, 'at:', orderRecord.used_at);
      return (
        <DownloadPageClient
          token={token}
          entry={{
            token,
            filePath: orderRecord.file_path || 'used',
            createdAt: orderRecord.created_at,
            expiresInMinutes: 0,
            orderId: orderRecord.id,
            downloadCompleted: true
          }}
          supabaseData={{
            orderId: orderRecord.id,
            isUsed: true
          }}
          expiresAt={orderRecord.download_expires}
          isCompleted={true}
          completedAt={orderRecord.used_at}
        />
      );
    }

    // ‚úÖ Token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ download ‡∏´‡∏£‡∏∑‡∏≠ is_used = false)
    console.log('üíö Token is valid and ready for download');
    return (
      <DownloadPageClient
        token={token}
        entry={{
          token,
          filePath: orderRecord.file_path || '/default-download',
          createdAt: orderRecord.created_at,
          expiresInMinutes: 2880, // 48 hours
          orderId: orderRecord.id,
          downloadStarted: false,
          downloadCompleted: false
        }}
        supabaseData={{
          orderId: orderRecord.id,
          email: orderRecord.email,
          filePath: orderRecord.file_path
        }}
        expiresAt={orderRecord.download_expires}
        isCompleted={false}
      />
    );

  } catch (error) {
    console.error('üî• Error in download page:', error);
    
    // üÜï ‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    console.error('üî• Detailed error info:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : 'No stack trace',
      token: token,
      tokenLength: token.length
    });
    
    notFound();
  }
}